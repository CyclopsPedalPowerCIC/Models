/*


21/4/18 this is copied from another file, alot of junk code below needs deleting to make this only do the dumpload part of the job

*/


#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Arduino.h>
#include <TM1637Display.h>



#define numsensors 12
//6 voltages and 6 currents
//also want one global voltage to check for overvoltage?
#define maxpoints 200

//analogue pin:
int pinADC=A0;
int pinPWM1=D1; 
int pinPWM2=D2; 

int CLK1 = D5;  //pins for display
int DIO1 = D6;


TM1637Display Pdisplay(CLK1, DIO1); //display for voltage
TM1637Display display(CLK1, DIO1); //display for voltage



int threshold1 = 40; //voltage dumpload starts to come on at 
int threshold2 = 50;//voltage dumpoad is fully on

const int led = 13;  //indicates when the server is in use
const char* ssid = "cyclops_wifi";
const char* password = "skullface";

#define TEST_DELAY   2000

String returnString=""; //this is the string that will be returned after the html request



int time1=0;
int timedelay=2; //seconds


float dataLog[numsensors+1][maxpoints]={0};
int totalPoints=0;

ESP8266WebServer server(80);

void setup(void){
  
  pinMode(CLK1,OUTPUT);
  pinMode(DIO1,OUTPUT);
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  for(int k=0; k <= 4; k++) {
    Pdisplay.showNumberDecEx(0, (0x80 >> k), true);
    delay(1000);
  }
  
  
pinMode(pinPWM1,OUTPUT);
pinMode(pinPWM2,OUTPUT);
pinMode(pinADC,INPUT);
//pinMode(CLK1,OUTPUT);
//pinMode(CLK2,OUTPUT);
//pinMode(DIO1,OUTPUT);
  setdisplay();
//pinMode(DIO2,OUTPUT);


 int k;
  uint8_t data[] = { 0xff, 0xff, 0xff, 0xff };
  display.setBrightness(0x0f);

  // All segments on
  display.setSegments(data);
  delay(TEST_DELAY);

  // Selectively set different digits
  data[0] = 0b01001001;
  data[1] = display.encodeDigit(1);
  data[2] = display.encodeDigit(2);
  data[3] = display.encodeDigit(3);

  for(k = 3; k >= 0; k--) {
  display.setSegments(data, 1, k);
  delay(TEST_DELAY);
  }

  display.setSegments(data+2, 2, 2);
  delay(TEST_DELAY);

  display.setSegments(data+2, 2, 1);
  delay(TEST_DELAY);

  display.setSegments(data+1, 3, 1);
  delay(TEST_DELAY);


  // Show decimal numbers with/without leading zeros
  bool lz = false;
  for (uint8_t z = 0; z < 2; z++) {
  for(k = 0; k < 10000; k += k*4 + 7) {
    display.showNumberDec(k, lz);
    delay(TEST_DELAY);
  }
  lz = true;
  }

  // Show decimal number whose length is smaller than 4
  for(k = 0; k < 4; k++)
  data[k] = 0;
  display.setSegments(data);

  // Run through all the dots
  for(k=0; k <= 4; k++) {
    display.showNumberDecEx(0, (0x80 >> k), true);
    delay(TEST_DELAY);
  }

  display.showNumberDec(153, false, 3, 1);
  delay(TEST_DELAY);
  display.showNumberDec(22, false, 2, 2);
  delay(TEST_DELAY);
  display.showNumberDec(0, true, 1, 3);
  delay(TEST_DELAY);
  display.showNumberDec(0, true, 1, 2);
  delay(TEST_DELAY);
  display.showNumberDec(0, true, 1, 1);
  delay(TEST_DELAY);
  display.showNumberDec(0, true, 1, 0);
  delay(TEST_DELAY);

  // Brightness Test
  for(k = 0; k < 4; k++)
  data[k] = 0xff;
  for(k = 0; k < 7; k++) {
    display.setBrightness(k);
    display.setSegments(data);
    delay(TEST_DELAY);
  }
  
  // On/Off test
  for(k = 0; k < 4; k++) {
    display.setBrightness(7, false);  // Turn off
    display.setSegments(data);
    delay(TEST_DELAY);
    display.setBrightness(7, true); // Turn on
    display.setSegments(data);
    delay(TEST_DELAY);  
  }

  // Done!
 // display.setSegments(SEG_DONE);
  
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    setdisplay();
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  //include all webpages available here:

  server.on("/", handleRoot);
 // server.on("/RawData", handleRawData);
 // server.on("/RawDataOnly", handleRawDataOnly);
//  server.on("/Data", handleData);
//  server.on("/ChangeSensors",[](){
//  server.send(200, "text/plain", "this will change the number of sensors when I get around to adding that function");});
//  server.on("/DataOnly", handleDataOnly);
//  server.on("/MashTemp", handlemashTemp);
//  server.on("/DataLog", handleDataLog);
//  server.on("/reset", [](){resetProbes();  server.send(200, "text/plain", String(numprobes) + "Probes detected");});
  server.on("/inline", [](){server.send(200, "text/plain", "this works as well");});
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");

}

void loop(void){
  server.handleClient();

  //checkvoltage();  //turn on dumpload if voltage is too high
  setdisplay();
  if (millis()-time1>timedelay*1000){//perform ana ftion every "timedelay" # of seconds
    time1=millis();
    int  dataMode=2;
    getdata(numsensors);
    //setdisplay();
    //dataLog
    //dataLog[maxSensors][totalPoints]=millis()/1000.0;
    //totalPoints+=1;
    }
}

void checkvoltage(){
  
//  check for an overvoltage situation
  getValues(); //will need to change the pin number and conversion factor later
  float maxVal=0;

  if (maxVal>threshold2){
    analogWrite(pinPWM1,1);
    }
  else if (maxVal>threshold1){
    int value = ((maxVal-threshold1)*1023)/(threshold2-threshold1);
    analogWrite(pinPWM1,value);
    
    }
  else if(maxVal<threshold1){
    analogWrite(pinPWM1,0);
    }
  }

void handleRawDataOnly(){
returnString="";
getdata(numsensors);


  
server.send(200, "text/plain", returnString);
}


void handleRawData(){
  time1=millis();
returnString="";
getdata(numsensors);



  
server.send(200, "text/plain", returnString);
}


void getValues(){
getdata(numsensors);
convertValues();
}

void convertValues(){
int i;

  
  
  }

float convertV(float value){
  value=value/18.0;
  if (value<0.5){value=0;}

  return value;
}


float convertI(float value,int pin){
  //int currzero[6]={504,506,502,507,506,496};//not all sensors are the same, this array accounts for the slight differences in central voltage.
  //these voltages are also dependent on the supply voltage, which may change. grr. have to accept that for now
  int currzero[6]={483,488,483,489,487,481};
  value=currzero[pin]-value;
  value=value*0.037;
  if (value<0.2) {value=0;}
  return value; //converted to actual current
}

void setdisplay(){

  float power=1230;

     
    //Pdisplay.showNumberDec(power, false);//need to set the formatting correctly, currently probably only uses last two/three didgets. are decimals possible?
  Serial.print("setdisplay");
   Pdisplay.showNumberDec(0, true, 1, 0);
  

//server.send(200, "text/plain", returnString);

}

void handleData(){
  time1=millis();
returnString="";
getValues();

server.send(200, "text/plain", returnString);

}

void handleDataOnly(){
  time1=millis();
returnString="";

server.send(200, "text/plain", returnString);
}


void handleDataLog(){
returnString="Temperature Logs:\n";
returnString+="T1,    T2,    T3,    T4,    T5,   time\n";
 for (int j=0;j<totalPoints;j++){
   for (int i=0;i<numsensors+1;i++){
     returnString+=String(dataLog[i][j])+", ";
}
returnString+="\n";
}
server.send(200, "text/plain", returnString);
}


int getdata(int pin){

  return 0; //error code to say nothing happened
}


void handleRoot() {
  digitalWrite(led, 1);
  server.send(200, "text/plain", "hello from esp8266!");
  digitalWrite(led, 0);
}

void handleNotFound(){
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

